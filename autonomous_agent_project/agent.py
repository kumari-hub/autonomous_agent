import asyncio
import random


class Agent:
    # Initialization of the Agent class
    def __init__(self, name):
        self.name = name # Name of the agent
        self.inbox = asyncio.Queue() # Queue to store incoming messages for the agent
        self.outbox = asyncio.Queue() # Queue to store outgoing messages from the agent
        self.handlers = {}
        self.behaviors = []

     # Register a handler for a specific type of message
    def register_handler(self, message_type, handler):
        self.handlers[message_type] = handler

    # Register a behavior for the agent, which will generate messages
    def register_behavior(self, behavior):
        self.behaviors.append(behavior)

    # Consume messages from the inbox, process them based on their type
    async def messages_consume(self):
        loop = asyncio.get_running_loop()
        while True:
            message = await self.inbox.get() # Wait for and retrieve the next message from the inbox
            message_type = message.get("type")
            if message_type in self.handlers:
                handler = self.handlers[message_type]
                await handler(message) # Call the handler asynchronously to process the message

    # Emit messages generated by behaviors to another agent's inbox            
    async def messages_emit(self, other_agent):
        while True:
            for behavior in self.behaviors:
                message = await behavior()
                if message:
                    await self.outbox.put(message)
                    await other_agent.inbox.put(message)
            await asyncio.sleep(1)  # Sleep for a short time (1 second) before emitting the next batch of messages

